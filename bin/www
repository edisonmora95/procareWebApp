#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app       = require('../app');
let debug     = require('debug')('procareapp:server');
let http      = require('http');
let models    = require('../models');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/*Inicializar cluster */

/*if( cluster.isMaster ){
  console.log('Number of cpus:', numCPUs);
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
}else{
  // Workers can share any TCP connection
  // In this case it is an HTTP server
*/
  /**
   * Create HTTP server.
   */

  let server = http.createServer(app);

  /**
    * Listen on provided port, on all network interfaces.
      para que se sincronize 
  */

  models.sequelize.sync().then( () => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  });

  //console.log(`Worker ${process.pid} started`);

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if ( error.syscall !== 'listen' ) {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch ( error.code ) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
//}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if ( isNaN(port) ) {
    // named pipe
    return val;
  }

  if ( port >= 0 ) {
    // port number
    return port;
  }

  return false;
}



/**
* Make to MVC with sequelize
*/


